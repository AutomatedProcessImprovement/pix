services:
  users:
    build:
      context: services/users
    ports:
      - 8000:8000
    env_file:
      - services/users/.env
    secrets:
      - superuser_email
      - superuser_password
      - users_secret_key
      - system_email
      - system_password
    environment:
      SUPERUSER_EMAIL_FILE: /run/secrets/superuser_email
      SUPERUSER_PASSWORD_FILE: /run/secrets/superuser_password
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
      SECRET_KEY_FILE: /run/secrets/users_secret_key
    depends_on:
      - users-db
    networks:
      - backend
    restart: on-failure
  projects:
    build:
      context: services/projects
    ports:
      - 8030:8000
    env_file:
      - services/projects/.env
    secrets:
      - system_email
      - system_password
    environment:
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
    depends_on:
      - projects-db
      - assets
    networks:
      - backend
    restart: on-failure
  processing-requests:
    build:
      context: services/processing-requests
    ports:
      - 8040:8000
    env_file:
      - services/processing-requests/.env
    secrets:
      - system_email
      - system_password
    environment:
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
    depends_on:
      - processing-requests-db
      - projects
      - users
      - files
      - assets
      - kafka
    networks:
      - backend
    restart: on-failure
  assets:
    build:
      context: services/assets
    ports:
      - 8020:8000
    env_file:
      - services/assets/.env
    secrets:
      - system_email
      - system_password
    environment:
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
    depends_on:
      - assets-db
      - files
    networks:
      - backend
    restart: on-failure
  files:
    build:
      context: services/files
    ports:
      - 8010:8000
    env_file:
      - services/files/.env
    secrets:
      - system_email
      - system_password
    environment:
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
    depends_on:
      - files-db
    networks:
      - backend
    volumes:
      - uploads:/var/tmp/uploads:rw
    restart: on-failure
  users-db:
    image: postgres
    restart: on-failure
    user: postgres
    volumes:
      - users-db-data:/var/lib/postgresql/data
    env_file:
      - services/users/.env
    expose:
      - 5432
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  projects-db:
    image: postgres
    restart: on-failure
    user: postgres
    volumes:
      - projects-db-data:/var/lib/postgresql/data
    env_file:
      - services/projects/.env
    expose:
      - 5432
    ports:
      - 5435:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  processing-requests-db:
    image: postgres
    restart: on-failure
    user: postgres
    volumes:
      - processing-requests-db-data:/var/lib/postgresql/data
    env_file:
      - services/processing-requests/.env
    expose:
      - 5432
    ports:
      - 5436:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  files-db:
    image: postgres
    restart: on-failure
    user: postgres
    volumes:
      - files-db-data:/var/lib/postgresql/data
    env_file:
      - services/files/.env
    expose:
      - 5432
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  assets-db:
    image: postgres
    restart: on-failure
    user: postgres
    volumes:
      - assets-db-data:/var/lib/postgresql/data
    env_file:
      - services/assets/.env
    expose:
      - 5432
    ports:
      - 5434:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
    depends_on:
      - zipkin
      - loki
      - prometheus
    networks:
      - backend
    restart: on-failure
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - backend
    command: ["--zipkin.ui.basepath=/admin/zipkin"]
    restart: on-failure
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-local-config.yaml:/etc/loki/local-config.yaml
    networks:
      - backend
    restart: on-failure
  grafana:
    image: grafana/grafana:latest
    environment:
      - "GF_AUTH_DISABLE_LOGIN_FORM=true"
      - "GF_AUTH_ANONYMOUS_ENABLED=true"
      - "GF_AUTH_ANONYMOUS_ORG_ROLE=Admin"
      - "GF_SERVER_ROOT_URL=http://localhost:9999/admin/grafana/"
      - "GF_SERVER_SERVE_FROM_SUB_PATH=true"
    ports:
      - "3000:3000"
    depends_on:
      - loki
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://loki:3100
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus:9090
        EOF
        /run.sh
    networks:
      - backend
    restart: on-failure
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/prometheus
        cat <<EOF > /etc/prometheus/prometheus.yml
        scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
        - job_name: 'otel-collector'
          static_configs:
            - targets: ['otel-collector:8888']
        - job_name: 'otel-exporters'
          static_configs:
            - targets: ['otel-collector:8889']
        EOF
        /bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/usr/share/prometheus/console_libraries --web.console.templates=/usr/share/prometheus/consoles --web.external-url=/admin/prometheus/
    networks:
      - backend
    restart: on-failure
  kafka:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - "9092:9092"
      - "9094:9094" # This port must be exposed if we move workers to other machines
    volumes:
      - kafka_data:/bitnami
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=5Bj9tBcqQBypjM7jJaNAXw
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094 # TODO: PLAINTEXT should be changed in production
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Other
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - backend
    restart: on-failure
  kafka-ui:
    depends_on:
      - kafka
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    environment:
      # DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: "5Bj9tBcqQBypjM7jJaNAXw"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      SERVER_SERVLET_CONTEXT_PATH: "/admin/kafka-ui"
    networks:
      - backend
    restart: on-failure
  bps-discovery-simod:
    build:
      context: workers/bps-discovery-simod
    env_file:
      - workers/bps-discovery-simod/.env
    secrets:
      - system_email
      - system_password
    environment:
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
    volumes:
      - bps-discovery-simod-data:/var/tmp/bps-discovery-simod:rw
    depends_on:
      - kafka
    networks:
      - backend
    restart: on-failure
  simulation-prosimos:
    build:
      context: workers/simulation-prosimos
    env_file:
      - workers/simulation-prosimos/.env
    secrets:
      - system_email
      - system_password
    environment:
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
    volumes:
      - simulation-prosimos-data:/var/tmp/simulation-prosimos:rw
    depends_on:
      - kafka
    networks:
      - backend
    restart: on-failure
  caddy:
    image: caddy
    ports:
      - "9999:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - backend
    restart: on-failure
  mail:
    build:
      context: workers/mail
    env_file:
      - workers/mail/.env
    depends_on:
      - kafka
    networks:
      - backend
    restart: on-failure
    environment:
      - GMAIL_USERNAME_FILE=/run/secrets/mail_gmail_username
      - GMAIL_APP_PASSWORD_FILE=/run/secrets/mail_gmail_password
    secrets:
      - mail_gmail_username
      - mail_gmail_password
  kronos:
    build:
      context: workers/kronos
    env_file:
      - workers/kronos/.env
    secrets:
      - system_email
      - system_password
    environment:
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
    volumes:
      - kronos-data:/var/tmp/kronos:rw
    depends_on:
      - kafka
    networks:
      - backend
    restart: on-failure
  kronos-http:
    build:
      context: services/kronos
    ports:
      - 8090:8000
    env_file:
      - services/kronos/.env
    secrets:
      - system_email
      - system_password
    environment:
      SYSTEM_EMAIL_FILE: /run/secrets/system_email
      SYSTEM_PASSWORD_FILE: /run/secrets/system_password
    depends_on:
      - kronos-db
    networks:
      - backend
    restart: on-failure
  kronos-db:
    image: postgres
    restart: on-failure
    user: postgres
    volumes:
      - kronos-db-data:/var/lib/postgresql/data
    env_file:
      - services/kronos/.env
    expose:
      - 5432
    ports:
      - 5437:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
volumes:
  users-db-data:
  files-db-data:
  assets-db-data:
  projects-db-data:
  processing-requests-db-data:
  uploads:
  kafka_data:
  caddy_data:
  caddy_config:
  bps-discovery-simod-data:
  simulation-prosimos-data:
  kronos-data:
  kronos-db-data:
networks:
  backend:
    name: pix_backend
secrets:
  mail_gmail_username:
    file: ./workers/mail/.secret_gmail_username
  mail_gmail_password:
    file: ./workers/mail/.secret_gmail_app_password
  superuser_email:
    file: ./services/users/.superuser_email.secret
  superuser_password:
    file: ./services/users/.superuser_password.secret
  users_secret_key:
    file: ./services/users/.key.secret
  system_email:
    file: ./services/users/.system_email.secret
  system_password:
    file: ./services/users/.system_password.secret
